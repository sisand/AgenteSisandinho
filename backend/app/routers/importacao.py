# app/routers/importacao.py

import logging
from fastapi import APIRouter, HTTPException, Query, BackgroundTasks, Depends, status

from app.core.security import get_api_key
# --- Importa tanto a fun√ß√£o quanto a vari√°vel de estado do servi√ßo ---
from app.services.importador_artigos import importar_artigos_movidesk, import_status

router = APIRouter()
logger = logging.getLogger(__name__)

@router.post(
    "/artigos", 
    tags=["Importa√ß√£o"], 
    status_code=status.HTTP_202_ACCEPTED,
    summary="Inicia a importa√ß√£o de artigos do Movidesk em segundo plano"
)
async def endpoint_importar_artigos(
    background_tasks: BackgroundTasks,
    reset_base: bool = Query(False, description="Se True, reseta a base no Weaviate antes de importar."),
    api_key: str = Depends(get_api_key)
):
    """
    Agenda a tarefa de importa√ß√£o de artigos para ser executada em segundo plano.
    
    - Retorna **202 Accepted** imediatamente se a tarefa for agendada.
    - Retorna **409 Conflict** se uma importa√ß√£o j√° estiver em andamento.
    """
    logger.info("üöÄ Endpoint de importa√ß√£o de artigos chamado.")
    
    # --- VERIFICA√á√ÉO DA TRAVA ANTES DE AGENDAR A TAREFA ---
    if import_status["in_progress"]:
        logger.warning("Requisi√ß√£o de importa√ß√£o bloqueada pois uma j√° est√° em andamento.")
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="Uma importa√ß√£o j√° est√° em andamento. Aguarde a conclus√£o da anterior antes de iniciar uma nova."
        )

    try:
        # Fun√ß√£o de callback para logar o progresso no console do backend
        async def progresso_callback(progresso):
            logger.info(f"üìä Progresso da importa√ß√£o (background): {progresso}")

        # Agenda a tarefa se a trava estiver livre
        background_tasks.add_task(
            importar_artigos_movidesk,
            progresso_callback=progresso_callback,
            reset_base=reset_base
        )
        
        # Retorna a resposta imediata de sucesso para o frontend
        return {"message": "Solicita√ß√£o de importa√ß√£o aceita. O processo foi iniciado em segundo plano."}
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao agendar a tarefa de importa√ß√£o: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao iniciar a importa√ß√£o: {str(e)}")