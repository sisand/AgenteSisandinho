# app/services/usuarios.py

import logging
from typing import Optional
from postgrest.exceptions import APIError
from app.core.clients import get_supabase_client # Importar o cliente Supabase

logger = logging.getLogger(__name__)

def obter_ou_criar_usuario(login: str, nome: Optional[str] = None) -> int:
    """
    Obtém o ID de um usuário pelo login. Se o usuário não existir, cria um novo.
    Retorna o ID do usuário.
    """
    supabase = get_supabase_client()

    try:
        # 1. Tentar obter o usuário pelo login
        logger.info(f"Tentando obter usuário com login: {login}")
        response = supabase.table("usuarios").select("id").eq("login", login).limit(1).execute()
        
        usuarios_existentes = response.data
        if usuarios_existentes:
            usuario_id = usuarios_existentes[0]["id"]
            logger.info(f"Usuário existente encontrado. ID: {usuario_id}")
            return usuario_id
        
        # 2. Se o usuário não existir, criar um novo
        logger.info(f"Usuário não encontrado. Criando novo usuário com login: {login}")
        novo_usuario_data = {
            "login": login,
            "nome": nome if nome else login # Use o nome fornecido, ou o login como nome padrão
        }
        
        # ATENÇÃO: NÃO inclua 'id' no dicionário de inserção se ele for GENERATED BY DEFAULT AS IDENTITY
        # Isso permite que o banco de dados gere o ID automaticamente.
        
        insert_response = supabase.table("usuarios").insert(novo_usuario_data).execute()
        
        # O Supabase retorna os dados do registro inserido em .data
        if insert_response.data:
            usuario_id = insert_response.data[0]["id"]
            logger.info(f"Novo usuário criado com sucesso. ID: {usuario_id}")
            return usuario_id
        else:
            # Caso improvável onde a inserção não retornou dados, mas também não deu erro
            logger.error(f"Erro inesperado: Inserção de usuário não retornou dados: {insert_response}")
            raise Exception("Falha ao criar usuário: dados de retorno ausentes.")

    except APIError as e:
        # Erro específico do PostgREST/Supabase
        logger.error(f"Erro ao obter/criar usuário: {e.args[0]}", exc_info=True)
        # Se for um conflito de ID duplicado e não foi tratado na busca, pode ter algum problema lógico.
        # No entanto, com a lógica de busca/criação, o erro de "duplicate key" para o ID autoincrementado
        # não deveria acontecer, a menos que o login já exista e a busca falhe, o que é um cenário a parte.
        # O erro mais comum aqui seria de RLS se ele fosse habilitado novamente, ou de violação de UNIQUE para 'login'.
        if e.args[0].get('code') == '23505' and 'login' in e.args[0].get('details', ''):
             logger.error("Conflito de login: O login já existe no banco de dados mas a busca inicial falhou.")
             # Você pode tentar uma nova busca aqui ou levantar um erro mais específico
             raise HTTPException(status_code=409, detail="Login já está em uso.")
        
        raise HTTPException(status_code=500, detail=f"Erro no serviço de usuários: {e.args[0].get('message', 'Erro desconhecido')}")
    except Exception as e:
        logger.error(f"Erro inesperado ao obter/criar usuário: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="Erro interno ao processar usuário.")