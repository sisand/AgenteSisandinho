-- =================================================================
-- SCRIPT DE LIMPEZA (PRIMEIRA PARTE)
-- Rodar APENAS este bloco primeiro para garantir um ambiente limpo.
-- =================================================================

DROP TABLE IF EXISTS public.mensagens_artigos_fonte CASCADE;
DROP TABLE IF EXISTS public.feedbacks CASCADE;
DROP TABLE IF EXISTS public.mensagens CASCADE;
DROP TABLE IF EXISTS public.sessoes CASCADE;
DROP TABLE IF EXISTS public.usuarios CASCADE;
DROP TABLE IF EXISTS public.prompts CASCADE;
DROP TABLE IF EXISTS public.parametros CASCADE;
DROP FUNCTION IF EXISTS public.update_atualizado_em_column();
DROP FUNCTION IF EXISTS public.match_mensagens(vector, double precision, integer);

-- FIM DA PRIMEIRA PARTE
-- =================================================================
-- SCRIPT DE CRIAÇÃO E INSERÇÃO (SEGUNDA PARTE)
-- Rodar APÓS o script de limpeza ter sido executado com sucesso.
-- =================================================================

-- Habilita a extensão pg_vector para busca semântica
CREATE EXTENSION IF NOT EXISTS vector WITH SCHEMA public;

-- =================================================================
-- FUNÇÃO TRIGGER PARA ATUALIZAÇÃO AUTOMÁTICA DE TIMESTAMPS
-- =================================================================
CREATE OR REPLACE FUNCTION public.update_atualizado_em_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.atualizado_em = now(); 
    RETURN NEW;
END;
$$ language 'plpgsql';


-- =================================================================
-- CRIAÇÃO DAS TABELAS
-- =================================================================

CREATE TABLE public.usuarios (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login TEXT UNIQUE NOT NULL,
    nome TEXT,
    criado_em TIMESTAMPTZ DEFAULT now() NOT NULL,
    atualizado_em TIMESTAMPTZ DEFAULT now() NOT NULL
);
CREATE TRIGGER handle_usuario_update BEFORE UPDATE ON public.usuarios FOR EACH ROW EXECUTE PROCEDURE public.update_atualizado_em_column();

CREATE TABLE public.sessoes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    usuario_id BIGINT REFERENCES public.usuarios(id) ON DELETE SET NULL,
    criado_em TIMESTAMPTZ DEFAULT now() NOT NULL,
    atualizado_em TIMESTAMPTZ DEFAULT now() NOT NULL
);
CREATE TRIGGER handle_sessao_update BEFORE UPDATE ON public.sessoes FOR EACH ROW EXECUTE PROCEDURE public.update_atualizado_em_column();

-- Tabela de MENSAGENS com todas as colunas necessárias pelo código Python
CREATE TABLE public.mensagens (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sessao_id BIGINT REFERENCES public.sessoes(id) ON DELETE CASCADE,
    usuario_id BIGINT REFERENCES public.usuarios(id) ON DELETE CASCADE NOT NULL,
    pergunta TEXT NOT NULL,
    resposta TEXT,
    tipo_resposta TEXT,                 -- <<< COLUNA ADICIONADA
    prompt_usado TEXT,                  -- <<< COLUNA ADICIONADA
    classificacao TEXT,                 -- <<< COLUNA 'categoria' RENOMEADA PARA 'classificacao'
    embedding VECTOR(1536),
    rag_utilizado BOOLEAN DEFAULT FALSE,
    artigos_fonte JSONB,                -- <<< COLUNA ADICIONADA
    feedback SMALLINT,
    comentario_feedback TEXT,
    tempo_processamento FLOAT,
    custo_total NUMERIC(10, 8),
    tokens_prompt INTEGER,
    tokens_completion INTEGER,
    criado_em TIMESTAMPTZ DEFAULT now() NOT NULL,
    atualizado_em TIMESTAMPTZ DEFAULT now() NOT NULL -- <<< COLUNA ADICIONADA
);
-- Adiciona o Trigger para a tabela mensagens
CREATE TRIGGER handle_mensagem_update BEFORE UPDATE ON public.mensagens FOR EACH ROW EXECUTE PROCEDURE public.update_atualizado_em_column();
-- Índices para performance
CREATE INDEX idx_mensagens_usuario ON public.mensagens(usuario_id);
CREATE INDEX idx_mensagens_sessao ON public.mensagens(sessao_id);

CREATE TABLE public.mensagens_artigos_fonte (
    mensagem_id BIGINT REFERENCES public.mensagens(id) ON DELETE CASCADE,
    artigo_movidesk_id BIGINT NOT NULL,
    PRIMARY KEY (mensagem_id, artigo_movidesk_id)
);

CREATE TABLE public.feedbacks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mensagem_id BIGINT REFERENCES public.mensagens(id) ON DELETE SET NULL,
    comentario TEXT,
    tipo TEXT,
    usuario_id BIGINT REFERENCES public.usuarios(id),
    criado_em TIMESTAMPTZ DEFAULT now() NOT NULL
);

CREATE TABLE public.prompts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome TEXT UNIQUE NOT NULL,
    descricao TEXT,
    conteudo TEXT NOT NULL,
    ativo BOOLEAN DEFAULT TRUE,
    criado_em TIMESTAMPTZ DEFAULT now() NOT NULL,
    atualizado_em TIMESTAMPTZ DEFAULT now() NOT NULL
);
CREATE TRIGGER handle_prompt_update BEFORE UPDATE ON public.prompts FOR EACH ROW EXECUTE PROCEDURE public.update_atualizado_em_column();

CREATE TABLE public.parametros (
    nome TEXT PRIMARY KEY,
    valor TEXT NOT NULL,
    descricao TEXT,
    criado_em TIMESTAMPTZ DEFAULT now() NOT NULL,
    atualizado_em TIMESTAMPTZ DEFAULT now() NOT NULL
);
CREATE TRIGGER handle_parametro_update BEFORE UPDATE ON public.parametros FOR EACH ROW EXECUTE PROCEDURE public.update_atualizado_em_column();


-- =================================================================
-- INSERÇÃO DE DADOS INICIAIS (SEEDING)
-- (Sem alterações aqui, continua igual)
-- =================================================================

INSERT INTO public.prompts (nome, descricao, conteudo, ativo) VALUES
('chat_padrao', 'Prompt principal do chat RAG, focado em clareza e autonomia.', $$Você é um assistente especialista no ERP Vision, amigável e extremamente didático. Sua missão é fornecer respostas claras e precisas baseadas exclusivamente nos artigos da base de conhecimento fornecidos.

**Instruções de Resposta:**
1. Analise a pergunta do usuário e o contexto dos artigos fornecidos.
2. Formule uma resposta direta e útil. Se a pergunta for sobre "como fazer", crie um passo a passo. Se for sobre "o que é", crie uma explicação concisa.
3. Use **Markdown** para formatar a resposta (use **negrito** para destacar menus, botões e conceitos importantes) para máxima clareza.
4. **IMPORTANTE: Não inclua os títulos dos artigos ou links no corpo da sua resposta principal.** A interface do usuário cuidará de exibir as fontes separadamente. A sua resposta deve ser um texto limpo, coeso e autônomo.
5. **NUNCA** invente informações. Se a resposta não estiver no contexto, informe que não encontrou a informação nos artigos.
6. Encerre de forma amigável, incentivando o usuário a fazer mais perguntas caso a dúvida não tenha sido totalmente esclarecida.$$, true),

('chat_geral', 'Prompt para conversas gerais, quando o RAG não é acionado.', $$Você é um assistente amigável e prestativo especializado no ERP Vision. Responda à pergunta do usuário de forma clara e objetiva com base no seu conhecimento geral. Se não souber a resposta, seja honesto e diga que não possui aquela informação, mas que pode ajudar com dúvidas sobre o sistema Vision.$$, true),

('classificador_rag', 'Prompt para a IA decidir se uma pergunta requer busca na base de conhecimento (RAG).', $$Você é um classificador de intenção. Sua única função é analisar a Pergunta abaixo e responder apenas com a palavra "SIM" ou "NÃO".

Critérios:
- Se a pergunta é sobre um procedimento, funcionalidade, erro ou qualquer tópico específico do sistema Vision, que provavelmente estaria em um artigo de ajuda -> SIM.
- Se a pergunta é uma saudação, um bate-papo genérico ou algo que não se refere ao sistema Vision -> NÃO.

Exemplos:
1. "Como configuro o envio de XML?" -> SIM
2. "Bom dia, tudo bem?" -> NÃO
3. "Onde encontro os relatórios de comissão?" -> SIM
4. "Qual o seu nome?" -> NÃO

Pergunta: "{pergunta}"
Responda apenas com SIM ou NÃO.$$
, true),

('curadoria', 'Prompt usado na geração estruturada de curadorias via GPT', $$Você é um especialista em suporte técnico de sistemas ERP para concessionárias.

Com base no resumo a seguir, gere uma estrutura formal com os seguintes campos:

1. **Pergunta do cliente**: Reescreva com clareza e tom consultivo, como se fosse enviada por um cliente.
2. **Solução aplicada**: Explique o que foi feito em passos práticos e objetivos.
3. **Diagnóstico** (opcional): Indique a possível causa raiz, se for possível.
4. **Resultado final** (opcional): Descreva o que aconteceu após aplicar a solução.
5. **Dica adicional** (opcional): Sugestão para evitar o problema ou facilitar o uso.

Mantenha um tom consultivo, fluido e padronizado, como se fosse publicado numa base de conhecimento da equipe técnica.

Resumo do atendimento:
"""{texto}"""

Responda apenas neste formato JSON:
{
  "pergunta": "...",
  "solucao": "...",
  "diagnostico": "...",
  "resultado": "...",
  "dica": "..."
}$$
, true);

INSERT INTO public.parametros (nome, valor, descricao) VALUES
('prompt_chat_padrao', 'chat_padrao', 'Nome do prompt ativo para o chat principal com RAG.'),
('prompt_chat_geral', 'chat_geral', 'Nome do prompt ativo para conversas gerais sem RAG.'),
('prompt_rag_classificador', 'classificador_rag', 'Nome do prompt que decide se uma pergunta precisa de RAG.'),
('prompt_curadoria_padrao', 'curadoria', 'Nome do prompt ativo para a ferramenta de curadoria.'),
('modelo', 'gpt-4', 'Modelo de linguagem padrão para o chat (ex: gpt-4, gpt-3.5-turbo).'),
('temperatura', '0.7', 'Criatividade da IA (0.0 a 2.0). Mais baixo = mais factual.'),
('embedding_model', 'text-embedding-ada-002', 'Modelo usado para gerar os embeddings dos artigos.'),
('limiar_confianca_classificador', '0.3', 'Confiança mínima do classificador de tópicos para aceitar uma categoria (0.0 a 1.0).'),
('rag_search_limit', '3', 'Número máximo de artigos que a busca vetorial deve retornar.'),
('log_level', 'INFO', 'Nível de log da aplicação (INFO, DEBUG, ERROR).'),
('base_article_url', 'https://sisand.movidesk.com/kb/pt-br/article', 'URL base para os links dos artigos no frontend.'),
('weaviate_url', 'https://kegwrhvasmc0n279eqrqra.c0.us-west3.gcp.weaviate.cloud', 'URL da instância do Weaviate.'),
('movi_list_url', 'https://api.movidesk.com/public/v1/kb/article', 'URL da API do Movidesk para listar artigos.'),
('movi_detail_url', 'https://api.movidesk.com/public/v1/article', 'URL da API do Movidesk para detalhar um artigo.');

-- =================================================================
-- FUNÇÃO DE BUSCA SEMÂNTICA
-- (Sem alterações aqui, continua igual)
-- =================================================================
CREATE OR REPLACE FUNCTION public.match_mensagens(
    embedding_input VECTOR(1536),
    min_similarity FLOAT,
    match_count INT
)
RETURNS TABLE (
    id BIGINT,
    pergunta TEXT,
    resposta TEXT,
    similarity FLOAT
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        m.id, 
        m.pergunta, 
        m.resposta, 
        1 - (m.embedding <=> embedding_input) AS similarity
    FROM public.mensagens AS m
    WHERE m.embedding IS NOT NULL AND (1 - (m.embedding <=> embedding_input)) > min_similarity
    ORDER BY similarity DESC
    LIMIT match_count;
END;
$$ LANGUAGE plpgsql;


-- =================================================================
-- SEGURANÇA: HABILITAR ROW LEVEL SECURITY (RLS) E CRIAR POLÍTICAS
-- (Sem alterações aqui, continua igual)
-- =================================================================
-- ATENÇÃO CRÍTICA: RLS está DESABILITADO em TODAS as tabelas de dados para facilitar o desenvolvimento.
-- Para produção, é ABSOLUTAMENTE CRUCIAL reabilitar RLS e implementar políticas de segurança robustas
-- para todas as tabelas. Isso inclui usar `ENABLE ROW LEVEL SECURITY` e criar políticas `USING` e `CHECK`
-- apropriadas, baseadas na autenticação de usuário (auth.uid()), roles específicas da API, etc.
-- Consulte a documentação do Supabase sobre RLS e segurança em produção.

-- ALERTA: As linhas ALTER TABLE comentadas abaixo DEVEM ser descomentadas
-- e políticas RLS específicas devem ser adicionadas para produção.

-- ALTER TABLE public.usuarios ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.sessoes ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.mensagens ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.feedbacks ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.prompts ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.parametros ENABLE ROW LEVEL SECURITY;

-- Como o RLS está desabilitado, as políticas abaixo não terão efeito,
-- mas estão aqui como exemplo e lembrete para implementação futura.
-- CREATE POLICY "Permitir leitura pública de parâmetros" ON public.parametros FOR SELECT USING (true);
-- CREATE POLICY "Permitir leitura pública de prompts" ON public.prompts FOR SELECT USING (true);
-- CREATE POLICY "Permitir acesso total para a API de Mensagens" ON public.mensagens FOR ALL USING (true) WITH CHECK (true);
-- CREATE POLICY "Permitir insercao de usuarios pela API" ON public.usuarios FOR INSERT WITH CHECK (true);
-- CREATE POLICY "Usuários podem ver suas próprias mensagens" ON public.mensagens FOR SELECT USING (auth.uid() = usuario_id);
-- CREATE POLICY "Usuários podem inserir suas próprias mensagens" ON public.mensagens FOR INSERT WITH CHECK (auth.uid() = usuario_id);